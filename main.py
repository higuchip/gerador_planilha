import base64
import os
from reportlab.platypus import BaseDocTemplate
from reportlab.platypus import Frame, PageTemplate
from reportlab.platypus import Paragraph, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch
from reportlab.lib import colors
import streamlit as st

st.title("Gerador de Planilhas de Campo para Invent√°rios Florestais üìù")

st.write(
    "Planilhas de campo s√£o itens obrigat√≥rios no check-list para a realiza√ß√£o de invent√°rios "
    "florestais. Por mais simples que seja a sua prepara√ß√£o, os contratempos podem ser v√°rios, como uma eventual "
    "necessidade de urg√™ncia e a perda/corrompimento do arquivo no computador."
)

st.write(
    "Tendo em vista a praticidade e agilidade de um processo automatizado, aqui apresento um Gerador de Planilhas de "
    "Campo padronizadas. Ap√≥s o preenchimento das informa√ß√µes abaixo, clique em 'Download' "
    "para obten√ß√£o de seu arquivo no formato PDF pronto para impress√£o."
)

st.write()


st.write("### 1) Indica√ß√£o do Respons√°vel T√©cnico")
RESPONSAVEL = st.text_input("Digite o nome do respons√°vel t√©cnico pelo levantamento:")

st.write("### 2) Indica√ß√£o da √Årea")
AREA = st.text_input(
    "Digite o nome ou c√≥digo da √°rea onde ser√° realizado o invent√°rio florestal:"
)

st.write("### 3) Defini√ß√£o do tamanho da planilha")
N_ARV = st.number_input(
    "Insira o n√∫mero de √°rvores que potencialmente ser√£o medidas:", min_value=0, step=1
)

# Gera√ß√£o do PDF

styles = getSampleStyleSheet()
colwidths = [0.5 * inch, 0.5 * inch, 2 * inch, 1.5 * inch, 0.5 * inch, 1.5 * inch]


def header(canvas, pdf):
    canvas.drawString(165, 800, "PLANILHA DE CAMPO - INVENT√ÅRIO FLORESTAL")
    canvas.drawString(63, 765, f"√ÅREA: {AREA}")
    # canvas.setLineWidth(inch * 0.01)
    # canvas.line(100, 760, 200, 760)
    canvas.drawString(410, 765, "DATA:_____________")
    canvas.drawString(63, 745, f"RESPONS√ÅVEL: {RESPONSAVEL}")
    canvas.drawString(290, 745, "EQUIPE:_____________________________")
    page_num = canvas.getPageNumber()
    text = "P√°gina %s" % page_num
    canvas.drawRightString(530, 30, text)


pdf = BaseDocTemplate("planilha_campo.pdf", pagesize=A4)
frame = Frame(
    pdf.leftMargin - inch * 0.5,
    pdf.bottomMargin,
    pdf.width + inch,
    pdf.height - inch * 0.5,
)
# showBoundary=1)  # Delete to remove line around the frame.
template = PageTemplate(id="all_pages", frames=frame, onPage=header)
pdf.addPageTemplates([template])
# Data for table
data = [["Parc.", "N√∫m.", "Esp√©cie", "CAP/DAP", "Alt.", "Obs"]]
data.extend([[" ", " ", " ", " ", " ", " "] for i in range(N_ARV)])
# Styles for table
table_style = TableStyle(
    [
        ("GRID", (0, 0), (-1, -1), 0.25, colors.gray),
        # ('LINEBELOW', (0, 0), (-1, 0), 2, colors.black),
        ("ALIGN", (2, 0), (4, -1), "CENTER"),
    ]
)
# Create table and repeat row 1 at every split.
table = Table(data, repeatRows=1, style=table_style, colWidths=colwidths)
pdf.build([table])


# From GokulNC in https://discuss.streamlit.io/t/how-to-download-file-in-streamlit/1806/26 (Thanks!)
def get_binary_file_downloader_html(bin_file, file_label="File"):
    with open(bin_file, "rb") as f:
        data = f.read()
    bin_str = base64.b64encode(data).decode()
    href = f'<a href="data:application/octet-stream;base64,{bin_str}" download="{os.path.basename(bin_file)}">Download</a>'
    return href


st.write("### 4) Baixar o arquivo PDF da planilha")
st.markdown(
    get_binary_file_downloader_html("planilha_campo.pdf", "Planilha"),
    unsafe_allow_html=True,
)
st.write("### Contato:")
st.write(
    "Desenvolvido por ***Pedro Higuchi***. Em caso de d√∫vidas ou outras informa√ß√µes entre em [contato] (https://www.linkedin.com/in/pedro-higuchi-4085a81b/)."
)
st.write(
    "Observa√ß√£o: Funcionalidade em teste para posteriormente ser incorporado no ***Sistema de Gerenciamento "
    "de Dados de Invent√°rios de Florestas Nativas***, em desenvolvimento."
)


@st.cache(allow_output_mutation=True)
def Pageviews():
    return []


pageviews = Pageviews()
pageviews.append("dummy")

try:
    st.markdown("Contador de visitas: {}".format(len(pageviews)))
except ValueError:
    st.markdown("Contador de visitas: {}".format(1))
