import base64
import os
import tempfile
import uuid
import html
import re
import streamlit as st
from reportlab.platypus import BaseDocTemplate, Frame, PageTemplate
from reportlab.platypus import Paragraph, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch
from reportlab.lib import colors
import logging
from pathlib import Path

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configura√ß√µes de seguran√ßa
MAX_INPUT_LENGTH = 100
MAX_TREES = 2000
ALLOWED_CHARS = re.compile(r'^[a-zA-Z0-9\s\-_.√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á]+

def sanitize_input(text, max_length=MAX_INPUT_LENGTH):
    """Sanitiza entrada do usu√°rio"""
    if not text:
        return ""
    
    # Limita tamanho
    text = str(text)[:max_length]
    
    # Remove caracteres perigosos
    if not ALLOWED_CHARS.match(text):
        # Remove caracteres n√£o permitidos
        text = re.sub(r'[^a-zA-Z0-9\s\-_.√°√©√≠√≥√∫√†√®√¨√≤√π√¢√™√Æ√¥√ª√£√µ√ß√Å√â√ç√ì√ö√Ä√à√å√í√ô√Ç√ä√é√î√õ√É√ï√á]', '', text)
    
    # Escapa HTML por seguran√ßa adicional
    text = html.escape(text)
    
    return text.strip()

def validate_number_input(value, min_val=0, max_val=MAX_TREES):
    """Valida entrada num√©rica"""
    try:
        num = int(value)
        if min_val <= num <= max_val:
            return num
        else:
            raise ValueError(f"N√∫mero deve estar entre {min_val} e {max_val}")
    except (ValueError, TypeError):
        raise ValueError("Entrada deve ser um n√∫mero v√°lido")

def create_secure_pdf(responsavel, area, n_trees):
    """Cria PDF de forma segura com arquivo tempor√°rio"""
    
    # Sanitiza entradas
    responsavel_safe = sanitize_input(responsavel)
    area_safe = sanitize_input(area)
    n_trees_safe = validate_number_input(n_trees)
    
    # Cria arquivo tempor√°rio seguro
    temp_dir = tempfile.mkdtemp()
    file_id = str(uuid.uuid4())
    pdf_path = os.path.join(temp_dir, f"planilha_campo_{file_id}.pdf")
    
    # Garante que o caminho √© seguro
    temp_dir_resolved = Path(temp_dir).resolve()
    pdf_path_resolved = Path(pdf_path).resolve()
    if not str(pdf_path_resolved).startswith(str(temp_dir_resolved)):
        raise ValueError("Caminho de arquivo inseguro")
    
    try:
        # Configura√ß√µes do PDF
        styles = getSampleStyleSheet()
        colwidths = [0.5 * inch, 0.5 * inch, 2 * inch, 1.5 * inch, 0.5 * inch, 1.5 * inch]
        
        def header(canvas, pdf):
            """Header seguro do PDF"""
            # Limita tamanho do texto no canvas
            canvas.drawString(165, 800, "PLANILHA DE CAMPO - INVENT√ÅRIO FLORESTAL")
            canvas.drawString(63, 765, f"√ÅREA: {area_safe[:50]}")  # Limita tamanho
            canvas.drawString(410, 765, "DATA:_____________")
            canvas.drawString(63, 745, f"RESPONS√ÅVEL: {responsavel_safe[:40]}")  # Limita tamanho
            canvas.drawString(290, 745, "EQUIPE:_____________________________")
            page_num = canvas.getPageNumber()
            text = f"P√°gina {page_num}"
            canvas.drawRightString(530, 30, text)
        
        # Cria PDF
        pdf = BaseDocTemplate(pdf_path, pagesize=A4)
        frame = Frame(
            pdf.leftMargin - inch * 0.5,
            pdf.bottomMargin,
            pdf.width + inch,
            pdf.height - inch * 0.5,
        )
        template = PageTemplate(id="all_pages", frames=frame, onPage=header)
        pdf.addPageTemplates([template])
        
        # Dados da tabela
        data = [["Parc.", "N√∫m.", "Esp√©cie", "CAP/DAP", "Alt.", "Obs"]]
        data.extend([[" ", " ", " ", " ", " ", " "] for i in range(n_trees_safe)])
        
        # Estilos da tabela
        table_style = TableStyle([
            ("GRID", (0, 0), (-1, -1), 0.25, colors.gray),
            ("ALIGN", (2, 0), (4, -1), "CENTER"),
        ])
        
        table = Table(data, repeatRows=1, style=table_style, colWidths=colwidths)
        pdf.build([table])
        
        logger.info(f"PDF criado com sucesso: {n_trees_safe} √°rvores")
        return pdf_path
        
    except Exception as e:
        logger.error(f"Erro ao criar PDF: {e}")
        # Limpa arquivo se houve erro
        if os.path.exists(pdf_path):
            try:
                os.remove(pdf_path)
            except:
                pass
        raise

def get_secure_download_link(file_path, display_name="planilha_campo.pdf"):
    """Cria link de download seguro"""
    try:
        with open(file_path, "rb") as f:
            data = f.read()
        
        bin_str = base64.b64encode(data).decode()
        
        # Nome de arquivo sanitizado
        safe_filename = sanitize_input(display_name.replace('.pdf', '')) + '.pdf'
        
        href = f'<a href="data:application/pdf;base64,{bin_str}" download="{safe_filename}">üì• Download Planilha PDF</a>'
        return href
        
    except Exception as e:
        logger.error(f"Erro ao criar link de download: {e}")
        return "<p>‚ùå Erro ao gerar download</p>"
    
    finally:
        # Limpa arquivo tempor√°rio
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                # Remove diret√≥rio tempor√°rio se vazio
                parent_dir = os.path.dirname(file_path)
                if os.path.exists(parent_dir) and not os.listdir(parent_dir):
                    os.rmdir(parent_dir)
        except Exception as cleanup_error:
            logger.warning(f"Erro na limpeza: {cleanup_error}")

# Interface Streamlit segura
st.set_page_config(
    page_title="Gerador de Planilhas de Campo",
    page_icon="üìù",
    layout="centered"
)

st.title("Gerador de Planilhas de Campo para Invent√°rios Florestais üìù")

st.markdown("""
**Planilhas de campo** s√£o itens obrigat√≥rios no check-list para a realiza√ß√£o de invent√°rios 
florestais. Por mais simples que seja a sua prepara√ß√£o, os contratempos podem ser v√°rios, como uma eventual 
necessidade de urg√™ncia e a perda/corrompimento do arquivo no computador.

Tendo em vista a praticidade e agilidade de um processo automatizado, aqui apresento um **Gerador de Planilhas de 
Campo** padronizadas. Ap√≥s o preenchimento das informa√ß√µes abaixo, clique em 'Gerar PDF' 
para obten√ß√£o de seu arquivo pronto para impress√£o.
""")

st.markdown("---")

# Se√ß√£o 1: Respons√°vel T√©cnico
st.markdown("### 1Ô∏è‚É£ Respons√°vel T√©cnico")
responsavel = st.text_input(
    "Nome do respons√°vel t√©cnico:",
    max_chars=MAX_INPUT_LENGTH,
    help="Apenas letras, n√∫meros, espa√ßos e acentos s√£o permitidos"
)

# Se√ß√£o 2: √Årea
st.markdown("### 2Ô∏è‚É£ Identifica√ß√£o da √Årea")
area = st.text_input(
    "Nome ou c√≥digo da √°rea:",
    max_chars=MAX_INPUT_LENGTH,
    help="Apenas letras, n√∫meros, espa√ßos e acentos s√£o permitidos"
)

# Se√ß√£o 3: N√∫mero de √°rvores
st.markdown("### 3Ô∏è‚É£ Configura√ß√£o da Planilha")
n_arvores = st.number_input(
    "N√∫mero de √°rvores a serem medidas:",
    min_value=1,
    max_value=MAX_TREES,
    value=50,
    step=1,
    help=f"M√°ximo {MAX_TREES} √°rvores por planilha"
)

# Valida√ß√£o e gera√ß√£o
st.markdown("---")

if st.button("üîÑ Gerar Planilha PDF", type="primary"):
    if not responsavel.strip():
        st.error("‚ùå Nome do respons√°vel √© obrigat√≥rio")
    elif not area.strip():
        st.error("‚ùå Identifica√ß√£o da √°rea √© obrigat√≥ria")
    else:
        try:
            with st.spinner("üìÑ Gerando planilha..."):
                # Cria PDF seguro
                pdf_path = create_secure_pdf(responsavel, area, n_arvores)
                
                # Gera link de download
                download_link = get_secure_download_link(pdf_path)
                
                st.success("‚úÖ Planilha gerada com sucesso!")
                st.markdown("### 4Ô∏è‚É£ Download")
                st.markdown(download_link, unsafe_allow_html=True)
                
                # Informa√ß√µes da planilha gerada
                st.info(f"""
                üìã **Planilha gerada:**
                - **Respons√°vel**: {sanitize_input(responsavel)}
                - **√Årea**: {sanitize_input(area)}
                - **√Årvores**: {n_arvores}
                """)
                
        except ValueError as ve:
            st.error(f"‚ùå Erro de valida√ß√£o: {ve}")
        except Exception as e:
            st.error("‚ùå Erro ao gerar planilha. Tente novamente.")
            logger.error(f"Erro na gera√ß√£o: {e}")

# Informa√ß√µes adicionais
st.markdown("---")
st.markdown("### üìû Contato")
st.markdown("""
**Desenvolvido por Pedro Higuchi**  
üîó [LinkedIn](https://www.linkedin.com/in/pedro-higuchi-4085a81b/)

**Observa√ß√£o**: Sistema em desenvolvimento para incorpora√ß√£o no 
***Sistema de Gerenciamento de Dados de Invent√°rios de Florestas Nativas***.
""")

# Contador de uso seguro (por sess√£o)
if 'page_views' not in st.session_state:
    st.session_state.page_views = 1
else:
    st.session_state.page_views += 1

st.caption(f"Sess√£o atual: {st.session_state.page_views} intera√ß√µes")
